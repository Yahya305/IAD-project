// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Teacher {
    teacherId String @id @default(uuid())
    name      String
    email     String @unique()
    password  String
}

model Student {
    studentId      String           @id @default(uuid())
    seatNo         String           @unique()
    name           String
    section        Section?
    email          String?          @unique()
    password       String?
    isActivated    Boolean          @default(false)

    teamId         String?
    team           Team?            @relation(fields: [teamId], references: [teamId])

    challengeScore ChallengeScore[]
}

model Team {
    teamId     String      @id
    teamNumber Int
    section    Section

    students   Student[]
    challenges Challenge[] // Many-to-many with Challenge
}

model Competition {
    competitionId   String      @id @default(uuid())
    competitionName String
    startDate       DateTime    @default(now())
    endDate         DateTime

    challenges      Challenge[] // Lowercase plural
}

model Challenge {
    challengeId     String           @id @default(uuid())
    competitionName String

    competitionId   String
    competition       Competition      @relation(fields: [competitionId], references: [competitionId])

    challengeScore  ChallengeScore[]

    teams           Team[] // Many-to-many with Team
}

model ChallengeScore {
    challengeScoreId String    @id @default(uuid())
    score              Float

    studentId          String
    student            Student   @relation(fields: [studentId], references: [studentId])
    
    challengeId        String
    challenge          Challenge @relation(fields: [challengeId], references: [challengeId])
}

enum Section {
    A
    B
}
